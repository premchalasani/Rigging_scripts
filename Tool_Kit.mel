// ================================================= **********                          ***ToolkitRig 2k18 Created on MEL Platform***                           ********** ==============================================//

/*

                ToolkitRig_v.01

                Update -- 21st Aug 2k18 : Started With the window Pop-up :
                          21st Aug 2k18 : Updated ToolBox With Rig ShortCuts :
                          

*/


/*

               To create windows pop-up for ToolkitRig

               Created By - Ankit Singh
               Contact- +91-8558023658
               email- ank14ban1013@gmail.com

*/


// ================================================= **********                                        ***Lets Start***                                       ********** ==============================================//

        global string $ToolkitVersion = "v_1.0";
        global string $TooalkitDate = "2018-Aug-24";

global proc ToolkitWindow()
                    {
                        global string $ToolkitVersion;
                        global string $ToolkitDate;
                       string $window = `window -title "Short_Rig_Cuts"
                           -s 0 -mxb 0 -mnb 0
                           -widthHeight 235 400`;
                           scrollLayout -horizontalScrollBarThickness 25;
                           columnLayout -adjustableColumn true;
                           separator -w 2 -h 10;
                           button -label "Create Joint Controlers" -command "Joint_Controlers" -bgc 0 .5 0;
                           separator -w 2 -h 10;
                           button -label "Create Controlers" -command "Controlers" -bgc 0 .5 0;
                           separator -w 2 -h 10;                           
                           button -label "Create Joints" -command "Joints" -bgc 0 .5 0;
                           separator -w 2 -h 10;
                           button -label "Create Locators" -command "Locators" -bgc 0 .5 0;
                           separator -w 2 -h 10;
                           button -label "GroupAbove" -command "GroupAbove" -bgc 1 1 1;
                           separator -w 2 -h 10;
                           button -label "OffsetGrouping" -command "GroupOffset" -bgc 1 1 1;
                           separator -w 2 -h 10;
						   button -label "Create Reverse Connection" -command "reverseCon" -bgc 1 1 1;
                           separator -w 2 -h 10;
                           button -label "Controler >>> Null >>> Cluster" -command "NullCluConnection" -bgc 1 1 1;
                           separator -w 2 -h 10;
                           button -label "Cluster >>> Controler " -command "CluCtrlPos" -bgc 1 1 1;
                           separator -w 2 -h 10;
                           button -label "Controler >>> Cluster " -command "CtrlCluPos" -bgc 1 1 1;
                           separator -w 2 -h 10;
                           button -label "Follicle >>> Controler " -command "folCtrlCon" -bgc 1 1 1;
                           separator -w 2 -h 10;
                           button -label "Create Follicles" -command "crtfol" -bgc 1 1 1;
                           separator -w 2 -h 10;
                           button -label "Curve Through Selection" -command "CrvOnSel" -bgc 1 1 0.5;
                           separator -w 2 -h 10;
                           button -label "Joints On Curve" -command "JntOnCrv" -bgc 1 1 0.5;                           
                           separator -w 2 -h 10;
                           button -label "Locators On Curve" -command "CurveLoc" -bgc 1 1 0.5;
                           separator -w 2-h 10;
                           button -label "Clusters On Curve" -command "CurveClu" -bgc 1 1 0.5;
                           separator -w 2 -h 10;
                           button -label "Default Attr Val" -command "Value_0";
                           separator -w 2 -h 10;
                           button -label "Shootout Attr Val" -command "Value_ShootOut";                           
                           separator -w 2 -h 10;
                           button -label "Parent-Scale" -command "ParentScaleConstraint";                           
                           separator -w 2 -h 10;
                           button -label "Match Pivots" -command "MatchPivot";
                           separator -w 2 -h 10;
                           button -label "JointDisplay On" -command "JTDisplOn";
                           separator -w 2 -h 10;
                           button -label "JointDisplay Off" -command "JTDisplOff";
                           separator -w 2 -h 10;                           
                           button -label "Close" -command ("deleteUI -window " + $window) -bgc .5 0 0 ;
                           
                           separator -w 2 -h 10;
                           text -l ("Developed By :- Ankit Singh");
                           text -l ("Contact To :- ank14ban1013@gmail.com");
                           separator -w 2 -h 10;
                    	
                    setParent ..;
                    showWindow $window;
                    }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


global proc CtrlCluPos()
                {
                            string $sel[]= `ls-sl`;
                            int $sz=size($sel);
                            for($i=0;$i<$sz;$i++)
                                {
                                    select -r $sel[$i];
                                    string $name = `substitute "_ctl" $sel[$i] "_clu"`;
                                    string $cluName[] = `select -r $name`; 
                                    string $cluShape[] = `listRelatives -s $cluName`;
                                    float $position[] = `xform -q -ws -piv $sel[$i]`;
                                
                                    setAttr ($cluName[0]+".rotatePivotX") $position[0];
                                    setAttr ($cluName[0]+".rotatePivotY") $position[1];
                                    setAttr ($cluName[0]+".rotatePivotZ") $position[2];
                                    setAttr ($cluName[0]+".scalePivotX") $position[0];
                                    setAttr ($cluName[0]+".scalePivotY") $position[1];
                                    setAttr ($cluName[0]+".scalePivotZ") $position[2];
                                    
                                    setAttr ($cluShape[0]+".originX") $position[0];
                                    setAttr ($cluShape[0]+".originY") $position[1];
                                    setAttr ($cluShape[0]+".originZ") $position[2];
                                    select -r $sel[$i];
                                }
                }


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


global proc CrvOnSel()
                {
                            string $sel[] = `ls-sl`;
                            int $sz = size($sel);
                            string $crv[] = `circle -d 3 -s 8 -sw 240 -n Loc_Curve`;
                            string $rebuild[] = `rebuildCurve -d 3 -s ($sz-3) $crv`;
                            select "Loc_Curve.cv[*]";
                            string $ps[] = `ls-sl-fl`;
                            for($i=0;$i<$sz;$i++)
                                    {
                                        select $ps[$i];
                                        string $clu[] = `cluster -n Temp_Clu_01`;
                                        string $pcon[] = `parentConstraint $sel[$i] $clu`;
                                        delete $pcon;
                                    }
                            select Loc_Curve;DeleteHistory;
                }


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


global proc CluCtrlPos()
                {
                            string $sel[]= `ls-sl`;
                            int $sz=size($sel);
                            for($i=0;$i<$sz;$i++)
                            {
                                select -r $sel[$i];
                                string $ctrlName = `substitute "_clu" $sel[$i] "_ctl"`;
                                string $crvCon[] = `pointConstraint -w 1 $sel[$i] ($ctrlName + "_grp")`;
                                delete $crvCon[0];    
                            }
                }
                
                
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


global proc folCtrlCon()
                {
                            string $sel[]= `ls-sl`;
                            int $sz=size($sel);
                            for($i=0;$i<$sz;$i++)
                            {
                                select -r $sel[$i];
                                string $ctrlName = `substitute "_fol" $sel[$i] "_ctl_grp"`;
                                string $crvCon[] = `pointConstraint -mo $sel[$i] $ctrlName`;
                                  
                            }
                }


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


global proc JntOnCrv()
                {
                            string $sel[] = `ls-sl`;
                            int $sz = size($sel);
                            for($i=0;$i<$sz;$i++)
                            {
                                select ($sel[$i]+".cv[*]");
                                string $ps[] = `ls-sl-fl`;
                                int $xyz = size($ps);
                                for($j=0;$j<$xyz;$j++)
                                {
                                    select $ps[$j];
                                    string $clu[] = `cluster -n Temp_Pos_Clu_01`;
                                    string $jnt = `joint -n Temp_Wire_Pos_Jnt_01`;
                                    string $pcon[] = `pointConstraint $clu $jnt`;
                                    delete $pcon;  select $jnt; Unparent;             
                                 }     
                                 
                                 select $sel[$i]; DeleteHistory;
                            }
                            select "Temp_Wire_Pos_Jnt_*";
                            string $jntsel[] = `ls-sl`;
                            int $xyz = size($jntsel);
                            for($j=0;$j<$xyz;$j++)
                            {
                            select $jntsel[$j];
                            parent $jntsel[$j+1] $jntsel[$j]; 
                            joint -e -oj xyz -secondaryAxisOrient yup -ch -zso $jntsel[0];
                            }
                }


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


global proc Value_0()
                {
                            string $sel[] = `ls-sl`;
                            int $sz = size($sel);
                            for($i=0;$i<$sz;$i++)
                            {
                                select -r $sel[$i];
                                
                                setAttr ($sel[$i]+".translateX")0;
                                setAttr ($sel[$i]+".translateY")0;
                                setAttr ($sel[$i]+".translateZ")0;
                                setAttr ($sel[$i]+".rotateX")0;
                                setAttr ($sel[$i]+".rotateY")0;
                                setAttr ($sel[$i]+".rotateZ")0;
                                setAttr ($sel[$i]+".scaleX")1;
                                setAttr ($sel[$i]+".scaleY")1;
                                setAttr ($sel[$i]+".scaleZ")1;
                            }
                            print "Success";
                }


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


global proc Value_ShootOut()
                {
                            string $sel[] = `ls-sl`;
                            int $sz = size($sel);
                            for($i=0;$i<$sz;$i++)
                            {
                                select -r $sel[$i];
                                
                                setAttr ($sel[$i]+".translateX")99;
                                setAttr ($sel[$i]+".translateY")99;
                                setAttr ($sel[$i]+".translateZ")99;
                                setAttr ($sel[$i]+".rotateX")99;
                                setAttr ($sel[$i]+".rotateY")99;
                                setAttr ($sel[$i]+".rotateZ")99;
                                setAttr ($sel[$i]+".scaleX")0.1;
                                setAttr ($sel[$i]+".scaleY")0.1;
                                setAttr ($sel[$i]+".scaleZ")0.1;
                            }
                            print "Success";
                }
                                                                            

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


global proc crtfol()
                {
                            string $ps[] = `ls-sl-fl`;
                            int $sz = size($ps);
                            for($a=0;$a<$sz;$a++)
                            {
                                select $ps[$a];
                                string $sel[] =`filterExpand -ex 1 -sm 31 -sm 35 -sm 32 -sm 34`;
                                string $folicle = "";
                                if(`size($sel)` == 0)
                                {
                                     error "select UV or Vertex";
                                }
                                else
                                {
                                    for($i = 0; $i<`size($sel)`; $i++)
                                    {
                                        
                                        string $shp[]=`listRelatives -p -s $sel[$i]`;
                                        string $converted[] =`polyListComponentConversion -fv -fe -ff -fvf -fuv -tuv $sel[$i]`;
                                        if(`gmatch $converted[0] "*.map*"`){
                                            float $uv[] =`polyEditUV -q $converted[0]`;
                                            $folicle =`uvFolicle $shp[0] $uv[0] $uv[1]`; 
                                        }
                                    }
                            }
                        }
                    }

global proc string uvFolicle(string $shp, float $uVal, float $vVal)
{
    string $hsys = `createNode hairSystem`;
    int $ind[0] ;
    $ind[0] = 0;
    int $i;
    float $v = 0;
    float $u = $i/10.0;
    string $newHair = createHairCurveNode( $hsys, $shp, $uVal,$vVal,2, 
    false, false, false, false, "", 1.0, $ind, "","",1);
    delete `listRelatives -p $hsys`;
    return $newHair;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



global proc GroupAbove()
                {
                            string $sel[] = `ls -sl`;
                            int $sz = size($sel);
                            for($i=0;$i<$sz;$i++)
                            
                            {
                                select $sel[$i];
                                group -em -n ($sel[$i] + "_Grp");
                                string $grpCon[]= `parentConstraint $sel[$i] ($sel[$i] + "_Grp")`;
                                string $grpScaleCon[] = `scaleConstraint $sel[$i] ($sel[$i] + "_Grp")`; 
                                delete $grpCon;
                                delete $grpScaleCon;
                                parent $sel[$i] ($sel[$i] + "_Grp");    
                            }
                            print "Success";
                }


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


global proc GroupOffset()
                {
                            string $ps[] = `ls -sl`;
                            int $sz = size($ps);
                            for($i=0;$i<$sz;$i++)
                            
                            {
                                select $ps[$i];
                                string $abvGrp[] = `pickWalk -d up`;
                                group -em -n ($ps[$i] + "_Offset_Grp");
                                string $grpCon[]= `parentConstraint $ps[$i] ($ps[$i] + "_Offset_Grp")`;
                                string $grpScaleCon[] = `scaleConstraint $ps[$i] ($ps[$i] + "_Offset_Grp")`; 
                                delete $grpCon;
                                delete $grpScaleCon;
                                parent $ps[$i] ($ps[$i] + "_Offset_Grp");
                                parent ($ps[$i] + "_Offset_Grp") $abvGrp;   
                            }
                            print "Success";

                }


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


global proc ParentScaleConstraint()
                {
                            doCreateParentConstraintArgList 1 { "1","0","0","0","0","0","0","1","","1" };
                            parentConstraint -mo -weight 1;
                            doCreateScaleConstraintArgList 1 { "1","1","1","1","0","0","0","1","","1" };
                            scaleConstraint -mo -weight 1;
                            print "Success";
                }


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


global proc Joint_Controlers()
                {
                            string $sel[]= `ls-sl`;
			    int $sz=size($sel);
			    for($i=0;$i<$sz;$i++)
			    {
			        select -r $sel[$i];
			        string $ctrlName = `substitute "_env" $sel[$i] "_ctl"`;
			        string $crv[] = `circle -n $ctrlName -c 0 0 0 -nr 1 0 0 -r 1 -d 3 -s 8 -ch 0`;
			        string $crvCon[] = `parentConstraint -w 1 $sel[$i] $crv[0]`;
			        delete $crvCon[0];
			        select -r $crv[0]; group -w -em -n ($ctrlName + "_grp");
			        string $grpCon[] = `parentConstraint -w 1 $sel[$i] ($ctrlName + "_grp")`;
			        delete $grpCon[0]; parent $ctrlName ($ctrlName + "_grp");
					select $crv[0] $sel[$i];ParentScaleConstraint();
                    sets -e -add baseControl_set  $crv[0]; 

			    }



                }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


global proc Controlers()
                {
                            string $sel[]= `ls-sl`;
			    int $sz=size($sel);
			    for($i=0;$i<$sz;$i++)
			    {
			        select -r $sel[$i];
			        string $ctrlName = `substitute "_clu" $sel[$i] "_ctl"`;
			        string $crv[] = `circle -n $ctrlName -c 0 0 0 -nr 1 0 0 -r 1 -d 3 -s 8 -ch 0`;
			        string $crvCon[] = `parentConstraint -w 1 $sel[$i] $crv[0]`;
			        delete $crvCon[0];
			        select -r $crv[0]; group -w -em -n ($ctrlName + "_grp");
			        string $grpCon[] = `parentConstraint -w 1 $sel[$i] ($ctrlName + "_grp")`;
			        delete $grpCon[0]; parent $ctrlName ($ctrlName + "_grp");
			    }



                }


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


global proc MatchPivot()
                {
                            parentConstraint;
                            DeleteConstraints;
                            print "Success";
                }


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


global proc JTDisplOn()
                {
                            string $sel[]=`ls-sl`;
                            int $sz = size($sel);
                            for($i=0;$i<$sz;$i++)
                            {
                            setAttr -keyable 1 -channelBox 1 ($sel[$i]+".jox");
                            setAttr -keyable 1 -channelBox 1 ($sel[$i]+".joy");
                            setAttr -keyable 1 -channelBox 1 ($sel[$i]+".joz");
                            }
                            print "Success";
                }


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


global proc JTDisplOff()
                {
                            string $sel[]=`ls-sl`;
                            int $sz = size($sel);
                            for($i=0;$i<$sz;$i++)
                            {
                            setAttr -keyable 0 -channelBox 0 ($sel[$i]+".jox");
                            setAttr -keyable 0 -channelBox 0 ($sel[$i]+".joy");
                            setAttr -keyable 0 -channelBox 0 ($sel[$i]+".joz");
                            }
                            print "Success";
                }


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


global proc CurveJnt()
                {
                            string $CrvSel[] =`ls-sl`;
                            int $abc = size($CrvSel);
                            for($a=0;$a<$abc;$a++)
                            {
                                select $CrvSel[0]".cv[*]";
                                string $CVSel[] = `ls-sl-fl`;
                                int $xyz = size($CVSel);
                                for($b=0;$b<$xyz;$b++)
                                {
                                    select $CVSel[$b];
                                    cluster -n Temp_Jt_Clu_01;
                                    string $CluSel[] =`ls-sl`;
                                    select $CVSel[$b];
                                    joint -n Temp_Crv_Jnt;
                                    string $JtSel[] = `ls-sl`;
                                    int $sz = size($CluSel);
                                    for($c=0;$c<$sz;$c++)
                                    {
                                        select $CluSel[$c];
                                        pointConstraint $CluSel[$c] $JtSel[$c];
                                        select "Temp_Crv_Jnt*pointConstraint1"; select -add $CluSel[$c];
                                        delete;
                                        select $JtSel[$c];
                                        Unparent;
                                        
                                    }
                                }
                            }
                            print "Success";
                }    


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


global proc CurveLoc()
                {
                            string $CrvSel[] =`ls-sl`;
                            int $abc = size($CrvSel);
                            for($a=0;$a<$abc;$a++)
                            {
                                select $CrvSel[0]".cv[*]";
                                string $CVSel[] = `ls-sl-fl`;
                                int $xyz = size($CVSel);
                                for($b=0;$b<$xyz;$b++)
                                {
                                    select $CVSel[$b];
                                    cluster -n Temp_Loc_Clu_01;
                                    string $CluSel[] =`ls-sl`;
                                    select $CVSel[$b];
                                    spaceLocator -n Temp_Crv_Loc_01;
                                    string $LocSel[] = `ls-sl`;
                                    int $sz = size($CluSel);
                                    for($c=0;$c<$sz;$c++)
                                    {
                                        select $CluSel[$c];
                                        pointConstraint $CluSel[$c] $LocSel[$c];
                                        select "Temp_Crv_Loc*pointConstraint1"; select -add $CluSel[$c];
                                        delete;
                                        select $LocSel[$c];
                                        Unparent;
                                    }
                                }
                            }
                            print "Success";
                } 

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


global proc CurveClu()
                {
                            string $CrvSel[] =`ls-sl`;
                            int $abc = size($CrvSel);
                            for($a=0;$a<$abc;$a++)
                            {
                                select $CrvSel[0]".cv[*]";
                                string $CVSel[] = `ls-sl-fl`;
                                int $xyz = size($CVSel);
                                for($b=0;$b<$xyz;$b++)
                                {
                                    select $CVSel[$b];
                                    cluster -n $CrvSel;        
                                }
                            }
                            print "Success";
                } 


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


global proc Joints()
                {
                            string $ps[] = `ls-sl`;
                            int $sz = size($ps);
                            for($i=0;$i<$sz;$i++)
                            
                            {
                                select $ps[$i];
                                string $jnt = `joint -n ($ps[$i]+"_Jnt")`;
                                select $jnt; Unparent;
                                string $PCon[] = `parentConstraint $ps[$i] $jnt`;
                                delete $PCon;
                            }
                            print "Success";
                }


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


global proc Locators()
                {
                            string $ps[] = `ls-sl`;
                            int $sz = size($ps);
                            for($i=0;$i<$sz;$i++)
                            
                            {
                                select $ps[$i];
                                string $loc[] = `spaceLocator -n ($ps[$i]+"_LOC")`;
                                select $loc; Unparent;
                                string $PCon[] = `parentConstraint $ps[$i] $loc`;
                                delete $PCon;
                            }
                            print "Success";
                }


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


global proc reverseCon()
                {
                        	string $ps[] =`ls-sl`;
                        	int $sz = size($ps);
                        	for($i=0;$i<$sz;$i++)
                        	{
                            	select $ps[$i];
                            	shadingNode -asUtility multiplyDivide -n ($ps[$i]+"_md");   
                            	string $connectAttr = `connectAttr ($ps[$i]+".translate") ($ps[$i]+"_md.input1")`;    
                            	string $connectAttr = `connectAttr ($ps[$i]+"_md.output")($ps[$i]+"_Offset_Grp.translate")`;
                            	string $setX[] = `setAttr ($ps[$i]+"_md.input2X") -1`;
                            	string $setY[] = `setAttr ($ps[$i]+"_md.input2Y") -1`;
                            	string $setZ[] = `setAttr ($ps[$i]+"_md.input2Z") -1`;
                        	}	
                }


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


global proc NullCluConnection()
            {    
                            string $sel[]= `ls-sl`;
                            int $sz=size($sel);
                            for($i=0;$i<$sz;$i++)
                            {
                                select -r $sel[$i];
                                string $NullName = `substitute "_ctl" $sel[$i] "_Null"`;
                                group -w -em -n $NullName;
                                group -w -em -n ($NullName + "_grp");
                                parent $NullName ($NullName + "_grp");
                                string $pcon[] = `pointConstraint ($sel[$i]+"_grp") ($NullName+"_grp")`;
                                delete $pcon;
                                connectAttr ($sel[$i]+"_grp.rotate") ($NullName+"_grp.rotate");
                                connectAttr ($sel[$i]+"_grp.scale") ($NullName+"_grp.scale");                                
                                CBdeleteConnection ($NullName+"_grp.rotate");
                                CBdeleteConnection ($NullName+"_grp.scale");
                                connectAttr ($sel[$i]+".translate") ($NullName+".translate");
                                connectAttr ($sel[$i]+".rotate") ($NullName+".rotate");
                                connectAttr ($sel[$i]+".scale") ($NullName+".scale");
                                select -r $NullName;
                                string $cluName = `substitute "_Null" $NullName "_clu"`;
                                select -r $cluName;
                                string $clu[] = `ls-sl`;
                                parentConstraint -mo $NullName $clu[0];
                               scaleConstraint -mo $NullName $clu[0]; 
                            }
            }


ToolkitWindow;

print "\n"; print "Window_Success";


